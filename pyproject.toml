[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
python_version = "3.12"
strict = true

# Disallow dynamic typing
disallow_any_unimported = true
#disallow_any_expr = true
disallow_any_decorated = true
#disallow_any_explicit = true

warn_unreachable = true

[[tool.mypy.overrides]]
module = "livingdex.pkhex.*"
disallow_any_unimported = false
warn_return_any = false


[tool.poe.tasks]
ruff-fix = "ruff check livingdex tests --fix-only"
ruff-format = "ruff format livingdex tests"
prettier = "npx --no prettier livingdex/templates --write"
prettier-check = "npx --no prettier livingdex/templates --check"
biome-fix = "npx --no @biomejs/biome check livingdex --write"
format = ["ruff-fix", "ruff-format", "prettier", "biome-fix"]

mypy = "mypy livingdex tests"
ruff = "ruff check livingdex tests"
biome = "npx --no @biomejs/biome ci --error-on-warnings livingdex"
pytest = "pytest"
all = ["format", "mypy", "ruff", "biome", "pytest"]

pkhex.shell = """
    rm -rf nuget PKHeX.Core.dll
    dotnet restore --packages nuget
    cp nuget/pkhex.core/*/lib/net*/PKHeX.Core.dll .
"""


[tool.poetry]
name = "livingdex"
version = "0.1.0"
description = ""
authors = ["Parnassius <Parnassius@users.noreply.github.com>"]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
aiohttp = "3.10.10"
aiohttp-jinja2 = "1.6"
aiohttp-sse = "2.2.0"
pythonnet = "3.0.4"
typenv = "0.2.0"
watchfiles = "0.24.0"

[tool.poetry.group.dev.dependencies]
mypy = "1.13.0"
poethepoet = "0.29.0"
pytest = "8.3.3"
ruff = "0.7.2"

[tool.poetry.scripts]
livingdex = "livingdex.__main__:main"


[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers"
xfail_strict = true


[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "F",     # pyflakes
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PGH",   # pygrep-hooks
    "PTH",   # flake8-use-pathlib
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "T10",   # flake8-debugger
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]
ignore = [
    "A003",  # builtin-attribute-shadowing
]
fixable = [
    "I",     # isort
    "F401",  # unused-import
    "TID",   # flake8-tidy-imports
    "UP",    # pyupgrade
]
dummy-variable-rgx = "^_$"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false
